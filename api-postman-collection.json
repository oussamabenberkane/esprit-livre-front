{
	"info": {
		"_postman_id": "2763cd99-1ec7-400e-ab82-60bd022257b2",
		"name": "Esprit Livre API",
		"description": "Esprit Livre bookstore API with OAuth2 authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42547781"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get Token (Password Grant) - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Extract and save access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.access_token) {",
									"        pm.collectionVariables.set(\"el_admin_access_token\", jsonData.access_token);",
									"        console.log(\"✅ Admin access token saved\");",
									"    } else {",
									"        pm.expect.fail(\"No access_token in response\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid profile email",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{keycloak_url}}"
							],
							"path": [
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token (Password Grant) - User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Extract and save access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.access_token) {",
									"        pm.collectionVariables.set(\"el_user_access_token\", jsonData.access_token);",
									"        console.log(\"✅ User access token saved\");",
									"    } else {",
									"        pm.expect.fail(\"No access_token in response\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "user",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid profile email",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{keycloak_url}}"
							],
							"path": [
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Authentication Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User Account",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "App Users",
			"item": [
				{
					"name": "Complete Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Lhadi\",\n  \"lastName\": \"Tkt\",\n  \"phone\": \"+213549697533\",\n  \"wilaya\": \"Bejaia\",\n  \"city\": \"Bejaia\",\n  \"streetAddress\": \"Cite Aouchiche\",\n  \"postalCode\": \"00000\",\n  \"defaultShippingMethod\": \"SHIPPING_PROVIDER\",\n  \"defaultShippingProvider\": \"YALIDINE\",\n  \"langKey\": \"fr\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/app-users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/app-users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"user\",\n    \"firstName\": \"Oussama\",\n    \"lastName\": \"Benberkane\",\n    \"email\": \"oussamabenberkane.pro@gmail.com\",\n    \"langKey\": \"fr\",\n    \"imageUrl\": null,\n    \"phone\": \"+213549697533\",\n    \"wilaya\": \"Bejaia\",\n    \"city\": \"Akbou\",\n    \"streetAddress\": \"Sidi Ali\",\n    \"postalCode\": \"06001\",\n    \"defaultShippingMethod\": \"HOME_DELIVERY\",\n    \"defaultShippingProvider\": \"YALIDINE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/app-users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Email Change",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newEmail\": \"oussamabenberkane.pro@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/app-users/change-email",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"change-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"c4af4e2f-b432-4c3b-8405-cca86cd5b97b\",\n    \"login\": \"user\",\n    \"firstName\": \"Oussama\",\n    \"lastName\": \"Benberkane\",\n    \"email\": \"oussamabenberkane.pro@gmail.com\",\n    \"langKey\": \"fr\",\n    \"imageUrl\": null,\n    \"phone\": \"+213549697533\",\n    \"wilaya\": \"Bejaia\",\n    \"city\": \"Akbou\",\n    \"streetAddress\": \"Sidi Ali\",\n    \"postalCode\": \"06001\",\n    \"defaultShippingMethod\": \"HOME_DELIVERY\",\n    \"defaultShippingProvider\": \"YALIDINE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email Change",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/app-users/verify-email?token=Isr7taD1NbATYHTXihmC",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"verify-email"
							],
							"query": [
								{
									"key": "token",
									"value": "Isr7taD1NbATYHTXihmC",
									"description": "Token from verification email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/app-users/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-users",
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Create Book (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "book",
									"value": "{\n  \"title\": \"Sample Book Title\",\n  \"price\": 1500.00,\n  \"author\": {\n    \"id\": 1\n  },\n  \"stockQuantity\": 50,\n  \"description\": \"A wonderful book about literature and culture.\",\n  \"language\": \"FRENCH\",\n  \"active\": true\n}",
									"contentType": "application/json",
									"description": "Book data as JSON. Languages: FRENCH, ARABIC, ENGLISH",
									"type": "text"
								},
								{
									"key": "coverImage",
									"description": "Book cover image (JPEG, PNG, or WebP, max 10MB, 300x400 to 2000x3000 pixels)",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							]
						},
						"description": "Create a new book with cover image. Required: title, price, coverImage. Optional: author, stockQuantity (defaults to 1), description. Image constraints: JPEG/PNG/WebP, max 10MB, 300x400 to 2000x3000 pixels."
					},
					"response": []
				},
				{
					"name": "Update Book (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "book",
									"value": "{\n  \"id\": 1,\n  \"title\": \"Updated Book Title\",\n  \"price\": 1800.00,\n  \"author\": {\n    \"id\": 2\n  },\n  \"stockQuantity\": 75,\n  \"description\": \"Updated description with more details about the book's content.\",\n  \"language\": \"ARABIC\",\n  \"active\": true\n}",
									"contentType": "application/json",
									"description": "Book data as JSON (must include id). Languages: FRENCH, ARABIC, ENGLISH",
									"type": "text"
								},
								{
									"key": "coverImage",
									"description": "New book cover image (optional - if not provided, keeps existing cover)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/books/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update an existing active book. Required: id, title, price. Optional: author, stockQuantity, description, coverImage. If coverImage is provided, replaces the old one. Only works for active books."
					},
					"response": []
				},
				{
					"name": "Get All Books (with filters)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "categoryId",
									"value": "7",
									"description": "Filter by category tag ID",
									"disabled": true
								},
								{
									"key": "mainDisplayId",
									"value": "1",
									"description": "Filter by main display tag (highlights)",
									"disabled": true
								},
								{
									"key": "author",
									"value": "audr",
									"description": "Filter by author name",
									"disabled": true
								},
								{
									"key": "minPrice",
									"value": "14",
									"description": "Minimum price filter",
									"disabled": true
								},
								{
									"key": "maxPrice",
									"value": "20",
									"description": "Maximum price filter",
									"disabled": true
								},
								{
									"key": "search",
									"value": "fran",
									"description": "Search in title, author, tags",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book Suggestions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/suggestions?q=t",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "t",
									"description": "Search term for suggestions"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Tags to Book (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[1, 2, 3]"
						},
						"url": {
							"raw": "{{base_url}}/api/books/:id/tags/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								":id",
								"tags",
								"add"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Add tags to a book. Provide an array of tag IDs. Tags must be active."
					},
					"response": []
				},
				{
					"name": "Remove Tags from Book (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[1, 2]"
						},
						"url": {
							"raw": "{{base_url}}/api/books/:id/tags/remove",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								":id",
								"tags",
								"remove"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Remove tags from a book. Provide an array of tag IDs."
					},
					"response": []
				},
				{
					"name": "Delete Book - Soft Delete (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Soft delete a book (sets active=false). The book will not be visible in public listings but data is preserved."
					},
					"response": []
				},
				{
					"name": "Delete Book Forever - Hard Delete (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/:id/forever",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								":id",
								"forever"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Permanently delete a book from the database. This action cannot be undone. Use with caution!"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Create Tag (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tag",
									"value": "{\n  \"nameEn\": \"Mystery\",\n  \"nameFr\": \"Mystère\",\n  \"type\": \"CATEGORY\",\n  \"color\": \"#3498db\"\n}",
									"contentType": "application/json",
									"description": "Tag data as JSON. Types: CATEGORY, ETIQUETTE, MAIN_DISPLAY",
									"type": "text"
								},
								{
									"key": "image",
									"description": "Tag image (JPEG, PNG, or WebP, optional)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags"
							]
						},
						"description": "Create a new tag with optional image. Required: nameEn, nameFr, type. Optional: color (for ETIQUETTE), image, active (defaults to true). Tag types: CATEGORY, ETIQUETTE, MAIN_DISPLAY."
					},
					"response": []
				},
				{
					"name": "Update Tag (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "tag",
									"value": "{\n  \"id\": 1,\n  \"nameEn\": \"Updated Fiction\",\n  \"nameFr\": \"Fiction Mise à Jour\",\n  \"type\": \"CATEGORY\",\n  \"color\": \"#e74c3c\",\n  \"active\": true\n}",
									"contentType": "application/json",
									"description": "Tag data as JSON (must include id)",
									"type": "text"
								},
								{
									"key": "image",
									"description": "New tag image (optional - if not provided, keeps existing image)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/tags/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update a tag with optional new image. All fields can be changed including type. Required: id, nameEn, nameFr, type. Optional: color, image, active."
					},
					"response": []
				},
				{
					"name": "Get All Tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tags by Type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tags?type=CATEGORY",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags"
							],
							"query": [
								{
									"key": "type",
									"value": "CATEGORY",
									"description": "CATEGORY | ETIQUETTE | MAIN_DISPLAY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tags/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tag (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/tags/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Delete a tag. Cannot delete if tag is assigned to books."
					},
					"response": []
				},
				{
					"name": "Add Books to Tag (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[1, 2, 3]"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/:id/books/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id",
								"books",
								"add"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Add books to a tag. Provide an array of book IDs. Books must be active."
					},
					"response": []
				},
				{
					"name": "Remove Books from Tag (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[1, 2]"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/:id/books/remove",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id",
								"books",
								"remove"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Remove books from a tag. Provide an array of book IDs."
					},
					"response": []
				},
				{
					"name": "Change Tag Color (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"#FF5733\""
						},
						"url": {
							"raw": "{{base_url}}/api/tags/:id/change-color",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"tags",
								":id",
								"change-color"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Change the color of an ETIQUETTE tag. Provide a hex color code as a string (e.g., \"#FF5733\"). Only works for tags with type=ETIQUETTE."
					},
					"response": []
				}
			]
		},
		{
			"name": "Authors",
			"item": [
				{
					"name": "Create Author (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "author",
									"value": "{\n  \"name\": \"Yasmina Khadra\",\n  \"biography\": \"Renowned Algerian author known for his compelling narratives.\"\n}",
									"contentType": "application/json",
									"description": "Author data as JSON",
									"type": "text"
								},
								{
									"key": "profilePicture",
									"description": "Author profile picture (JPEG, PNG, or WebP, optional)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/authors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors"
							]
						},
						"description": "Create a new author with optional profile picture. Required: name. Optional: biography, profilePicture."
					},
					"response": []
				},
				{
					"name": "Update Author (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "author",
									"value": "{\n  \"id\": 1,\n  \"name\": \"Updated Author Name\",\n  \"biography\": \"Updated biography for the author.\"\n}",
									"contentType": "application/json",
									"description": "Author data as JSON (must include id)",
									"type": "text"
								},
								{
									"key": "profilePicture",
									"description": "New profile picture (optional - if not provided, keeps existing picture)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/authors/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update an author with optional new profile picture. Required: id, name. Optional: biography, profilePicture."
					},
					"response": []
				},
				{
					"name": "Get All Authors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/authors?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Top 10 Authors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/authors/top",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors",
								"top"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Author by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/authors/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Author (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/authors/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"authors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Delete an author. Cannot delete if author has books."
					},
					"response": []
				}
			]
		},
		{
			"name": "Likes (Authenticated)",
			"item": [
				{
					"name": "Toggle Like for Book",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/likes/toggle/:bookId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"likes",
								"toggle",
								":bookId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1",
									"description": "Book ID to like/unlike"
								}
							]
						},
						"description": "Toggle like for a book. If already liked, unlikes it. If not liked, likes it. Returns {bookId, isLiked, likeCount}"
					},
					"response": []
				},
				{
					"name": "Get Liked Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/liked?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"liked"
							],
							"query": [
								{
									"key": "search",
									"value": "harry",
									"description": "Search in title, author, tags",
									"disabled": true
								},
								{
									"key": "author",
									"value": "rowling",
									"description": "Filter by author name",
									"disabled": true
								},
								{
									"key": "minPrice",
									"value": "10",
									"description": "Minimum price filter",
									"disabled": true
								},
								{
									"key": "maxPrice",
									"value": "50",
									"description": "Maximum price filter",
									"disabled": true
								},
								{
									"key": "categoryId",
									"value": "7",
									"description": "Filter by category tag ID",
									"disabled": true
								},
								{
									"key": "mainDisplayId",
									"value": "1",
									"description": "Filter by main display tag",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						},
						"description": "Get all books liked by current user with optional filters"
					},
					"response": []
				}
			]
		},
		{
			"name": "Book Packs",
			"item": [
				{
					"name": "Create Book Pack (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bookPack",
									"value": "{\n  \"title\": \"Fantasy Collection\",\n  \"description\": \"A collection of the best fantasy books\",\n  \"price\": 2500.00,\n  \"books\": [\n    {\"id\": 1},\n    {\"id\": 2}\n  ]\n}",
									"contentType": "application/json",
									"description": "Book pack data as JSON (must include at least 2 books)",
									"type": "text"
								},
								{
									"key": "coverImage",
									"description": "Book pack cover image (JPEG, PNG, or WebP)",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/book-packs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"book-packs"
							]
						},
						"description": "Create a new book pack with cover image. Required: title, price, coverImage, books (minimum 2). Books must be provided as array of book objects with id field."
					},
					"response": []
				},
				{
					"name": "Update Book Pack (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bookPack",
									"value": "{\n  \"id\": 1,\n  \"title\": \"Updated Fantasy Collection\",\n  \"description\": \"An updated collection\",\n  \"price\": 2800.00,\n  \"books\": [\n    {\"id\": 1},\n    {\"id\": 2},\n    {\"id\": 3}\n  ]\n}",
									"contentType": "application/json",
									"description": "Book pack data as JSON (must include id and at least 2 books)",
									"type": "text"
								},
								{
									"key": "coverImage",
									"description": "New cover image (optional - if not provided, keeps existing cover)",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/book-packs/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"book-packs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update an existing book pack. Required: id, title, price, books (minimum 2). Optional: description, coverImage."
					},
					"response": []
				},
				{
					"name": "Get All Book Packs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/book-packs?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"book-packs"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book Pack by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/book-packs/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"book-packs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book Pack (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/book-packs/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"book-packs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Delete a book pack. Admin only."
					},
					"response": []
				}
			]
		},
		{
			"name": "Order Items",
			"item": [
				{
					"name": "Create Order Item",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 2,\n  \"unitPrice\": 500.00,\n  \"totalPrice\": 1000.00,\n  \"book\": {\n    \"id\": 1\n  },\n  \"order\": {\n    \"id\": 1\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/order-items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items"
							]
						},
						"description": "Create a new order item. Required: quantity, unitPrice, totalPrice, book, order."
					},
					"response": []
				},
				{
					"name": "Update Order Item",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"quantity\": 3,\n  \"unitPrice\": 500.00,\n  \"totalPrice\": 1500.00,\n  \"book\": {\n    \"id\": 1\n  },\n  \"order\": {\n    \"id\": 1\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/order-items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Update an existing order item."
					},
					"response": []
				},
				{
					"name": "Get All Order Items",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/order-items?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order Item by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/order-items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order Item",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/order-items/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"order-items",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contact",
			"item": [
				{
					"name": "Submit Contact Form",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"subject\": \"Question about book availability\",\n  \"message\": \"Hello, I would like to know if you have the book 'XYZ' in stock. Thank you.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/contact",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"contact"
							]
						},
						"description": "Submit a contact form. Public endpoint. Required: name, email, subject, message."
					},
					"response": []
				}
			]
		},
		{
			"name": "Public Users",
			"item": [
				{
					"name": "Get All Users (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						},
						"description": "Get all public user information (paginated). Public endpoint."
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"logout"
							]
						},
						"description": "Logout and get OAuth2 provider logout URL. Authenticated users only."
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth Info",
			"item": [
				{
					"name": "Get Auth Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth-info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth-info"
							]
						},
						"description": "Get OIDC provider information (issuer, clientId). Public endpoint."
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order (Guest or Authenticated)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Oussama Benberkane\",\n  \"phone\": \"+213549697533\",\n  \"email\": \"customer@example.com\",\n  \"wilaya\": \"Bejaia\",\n  \"city\": \"Akbou\",\n  \"streetAddress\": \"Cite Aouchiche\",\n  \"postalCode\": \"06001\",\n  \"shippingMethod\": \"SHIPPING_PROVIDER\",\n  \"shippingProvider\": \"YALIDINE\",\n  \"totalAmount\": 1800.00,\n  \"shippingCost\": 300.00,\n  \"orderItems\": [\n    {\n      \"bookId\": 1,\n      \"quantity\": 2,\n      \"unitPrice\": 500.00,\n      \"totalPrice\": 1000.00\n    },\n    {\n      \"bookId\": 2,\n      \"quantity\": 1,\n      \"unitPrice\": 500.00,\n      \"totalPrice\": 500.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Public endpoint - Guest checkout supported. For authenticated users, city/wilaya/phone will auto-fill from profile if not provided. Stock is validated before order creation. Required: phone, wilaya, city, totalAmount, shippingCost, orderItems. Optional: fullName, email, streetAddress, postalCode. ShippingMethod: SHIPPING_PROVIDER, HOME_DELIVERY. ShippingProvider: YALIDINE, ZR, PICK_UP."
					},
					"response": []
				},
				{
					"name": "Get My Orders (with filters)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?page=0&size=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "status",
									"value": "PENDING",
									"description": "PENDING | CONFIRMED | SHIPPED | DELIVERED | CANCELLED",
									"disabled": true
								},
								{
									"key": "dateFrom",
									"value": "2025-01-01T00:00:00Z",
									"description": "ISO 8601 datetime",
									"disabled": true
								},
								{
									"key": "dateTo",
									"value": "2025-12-31T23:59:59Z",
									"description": "ISO 8601 datetime",
									"disabled": true
								},
								{
									"key": "minAmount",
									"value": "100",
									"description": "Minimum total amount",
									"disabled": true
								},
								{
									"key": "maxAmount",
									"value": "5000",
									"description": "Maximum total amount",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						},
						"description": "Regular users see only their own orders. Admins see all orders. Supports filtering by status, date range, and amount range."
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5"
								}
							]
						},
						"description": "Regular users can only view their own orders. Admins can view any order."
					},
					"response": []
				},
				{
					"name": "Update Order (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"status\": \"DELIVERED\",\n  \"fullName\": \"Updated Customer Name\",\n  \"phone\": \"+213549697533\",\n  \"email\": \"customer@example.com\",\n  \"wilaya\": \"Bejaia\",\n  \"city\": \"Akbou\",\n  \"streetAddress\": \"Updated Address, Bloc A\",\n  \"postalCode\": \"06001\",\n  \"shippingMethod\": \"SHIPPING_PROVIDER\",\n  \"shippingProvider\": \"ZR\",\n  \"totalAmount\": 1800.00,\n  \"shippingCost\": 400.00,\n  \"orderItems\": [\n    {\n      \"bookId\": 1,\n      \"quantity\": 3,\n      \"unitPrice\": 500.00,\n      \"totalPrice\": 1500.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Admin only. Cannot update: id, uniqueId, createdAt, createdBy. When status changes to DELIVERED, book stock is automatically decremented. OrderStatus: PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED. ShippingMethod: SHIPPING_PROVIDER, HOME_DELIVERY. ShippingProvider: YALIDINE, ZR, PICK_UP."
					},
					"response": []
				},
				{
					"name": "Delete Order (Admin Only)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{el_admin_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Admin only"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{el_admin_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "keycloak_url",
			"value": "http://localhost:9080"
		},
		{
			"key": "realm",
			"value": "jhipster"
		},
		{
			"key": "client_id",
			"value": "web_app"
		},
		{
			"key": "client_secret",
			"value": "web_app"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "el_admin_access_token",
			"value": ""
		},
		{
			"key": "el_user_access_token",
			"value": ""
		}
	]
}